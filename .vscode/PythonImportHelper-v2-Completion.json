[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "psycopg2._psycopg",
        "description": "psycopg2._psycopg",
        "isExtraImport": true,
        "detail": "psycopg2._psycopg",
        "documentation": {}
    },
    {
        "label": "texte",
        "kind": 5,
        "importPath": "week-4.Day_1.Challenge.challenge",
        "description": "week-4.Day_1.Challenge.challenge",
        "peekOfCode": "texte = str(input('Put the string (10 characters) \\t: '))\nsize = len(texte)\n# Convert the string to list    \nstr_var = list(texte)\n# Then shuffle the string contents and will print the string    \nrandom.shuffle(str_var)\nif size > 10 :\n    print('String too long')\nelif size  < 10 :\n    print('String not long enough')",
        "detail": "week-4.Day_1.Challenge.challenge",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "week-4.Day_1.Challenge.challenge",
        "description": "week-4.Day_1.Challenge.challenge",
        "peekOfCode": "size = len(texte)\n# Convert the string to list    \nstr_var = list(texte)\n# Then shuffle the string contents and will print the string    \nrandom.shuffle(str_var)\nif size > 10 :\n    print('String too long')\nelif size  < 10 :\n    print('String not long enough')\nif size == 10 :",
        "detail": "week-4.Day_1.Challenge.challenge",
        "documentation": {}
    },
    {
        "label": "str_var",
        "kind": 5,
        "importPath": "week-4.Day_1.Challenge.challenge",
        "description": "week-4.Day_1.Challenge.challenge",
        "peekOfCode": "str_var = list(texte)\n# Then shuffle the string contents and will print the string    \nrandom.shuffle(str_var)\nif size > 10 :\n    print('String too long')\nelif size  < 10 :\n    print('String not long enough')\nif size == 10 :\n    for i in range(size) :\n    # i + 1 before the last character",
        "detail": "week-4.Day_1.Challenge.challenge",
        "documentation": {}
    },
    {
        "label": "computer_brand",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-4",
        "description": "week-4.Day_1.Exercise XP.Exercise-4",
        "peekOfCode": "computer_brand = \"AlienWare\"\nprint(\"I have \" + computer_brand + \" computer\")",
        "detail": "week-4.Day_1.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-5",
        "description": "week-4.Day_1.Exercise XP.Exercise-5",
        "peekOfCode": "name = 'Ryota Kise'\nage = 23\nshoe_size = 42\ninfo = \"My name is {} i have {} old . I play basketball every week-end to keep fit. I forgot I put on {}\".format(name, age, shoe_size)\nprint(info)",
        "detail": "week-4.Day_1.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-5",
        "description": "week-4.Day_1.Exercise XP.Exercise-5",
        "peekOfCode": "age = 23\nshoe_size = 42\ninfo = \"My name is {} i have {} old . I play basketball every week-end to keep fit. I forgot I put on {}\".format(name, age, shoe_size)\nprint(info)",
        "detail": "week-4.Day_1.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "shoe_size",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-5",
        "description": "week-4.Day_1.Exercise XP.Exercise-5",
        "peekOfCode": "shoe_size = 42\ninfo = \"My name is {} i have {} old . I play basketball every week-end to keep fit. I forgot I put on {}\".format(name, age, shoe_size)\nprint(info)",
        "detail": "week-4.Day_1.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-5",
        "description": "week-4.Day_1.Exercise XP.Exercise-5",
        "peekOfCode": "info = \"My name is {} i have {} old . I play basketball every week-end to keep fit. I forgot I put on {}\".format(name, age, shoe_size)\nprint(info)",
        "detail": "week-4.Day_1.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-6",
        "description": "week-4.Day_1.Exercise XP.Exercise-6",
        "peekOfCode": "a = 13\n# a = int (input('Entrez la valeur de a : '))\nb = 12\n# b = int (input('Entrez la valeur de b : '))\nif a > b :\n    print(\"Hello world\")",
        "detail": "week-4.Day_1.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-6",
        "description": "week-4.Day_1.Exercise XP.Exercise-6",
        "peekOfCode": "b = 12\n# b = int (input('Entrez la valeur de b : '))\nif a > b :\n    print(\"Hello world\")",
        "detail": "week-4.Day_1.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-7",
        "description": "week-4.Day_1.Exercise XP.Exercise-7",
        "peekOfCode": "a = int(input(\"Enter a number : \"))\nif a%2 == 0 :\n    print(\"This number is even \")\nelse:\n    print(\"This number is not even\")",
        "detail": "week-4.Day_1.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-8",
        "description": "week-4.Day_1.Exercise XP.Exercise-8",
        "peekOfCode": "name = \"Ryota\"\ntest = str((input('Enter your name :')))\nif name == test :\n    print('Subarashi, my self')",
        "detail": "week-4.Day_1.Exercise XP.Exercise-8",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-8",
        "description": "week-4.Day_1.Exercise XP.Exercise-8",
        "peekOfCode": "test = str((input('Enter your name :')))\nif name == test :\n    print('Subarashi, my self')",
        "detail": "week-4.Day_1.Exercise XP.Exercise-8",
        "documentation": {}
    },
    {
        "label": "taille",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP.Exercise-9",
        "description": "week-4.Day_1.Exercise XP.Exercise-9",
        "peekOfCode": "taille = int((input(\"Enter you height (in cm) : \" )))\nif taille > 148 :\n    print(\"You are tall enough to ride.\")\nelse :\n    print(\"You need to grow some more to ride.\")",
        "detail": "week-4.Day_1.Exercise XP.Exercise-9",
        "documentation": {}
    },
    {
        "label": "season",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "season = \"\"\nmonth = int(input(\"Input the month (1 - 12) or (January - December): \"))\nif month in ('December', 'January', 'February', 12, 1, 2):\n\tseason = 'winter'\nif month in ('September', 'October', 'November', 9, 10, 11):\n\tseason = 'autumn'\nif month in ('June', 'July', 'August', 6, 7, 8):\n\tseason = 'summer'\nif month in ('March', 'April', 'May', 3, 4, 5):\n\tseason = 'spring'\t",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "month = int(input(\"Input the month (1 - 12) or (January - December): \"))\nif month in ('December', 'January', 'February', 12, 1, 2):\n\tseason = 'winter'\nif month in ('September', 'October', 'November', 9, 10, 11):\n\tseason = 'autumn'\nif month in ('June', 'July', 'August', 6, 7, 8):\n\tseason = 'summer'\nif month in ('March', 'April', 'May', 3, 4, 5):\n\tseason = 'spring'\t\nprint(\"Season is\",season)",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "\tseason",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "\tseason = 'winter'\nif month in ('September', 'October', 'November', 9, 10, 11):\n\tseason = 'autumn'\nif month in ('June', 'July', 'August', 6, 7, 8):\n\tseason = 'summer'\nif month in ('March', 'April', 'May', 3, 4, 5):\n\tseason = 'spring'\t\nprint(\"Season is\",season)",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "\tseason",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "\tseason = 'autumn'\nif month in ('June', 'July', 'August', 6, 7, 8):\n\tseason = 'summer'\nif month in ('March', 'April', 'May', 3, 4, 5):\n\tseason = 'spring'\t\nprint(\"Season is\",season)",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "\tseason",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "\tseason = 'summer'\nif month in ('March', 'April', 'May', 3, 4, 5):\n\tseason = 'spring'\t\nprint(\"Season is\",season)",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "\tseason",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "description": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "peekOfCode": "\tseason = 'spring'\t\nprint(\"Season is\",season)",
        "detail": "week-4.Day_1.Exercise XP Gold.Exercise-2",
        "documentation": {}
    },
    {
        "label": "mot",
        "kind": 5,
        "importPath": "week-4.Day_1.Exercise XP Ninja.Exercise-5",
        "description": "week-4.Day_1.Exercise XP Ninja.Exercise-5",
        "peekOfCode": "mot = str (input(\"Enter sentence (without A) : \"))\nwhile True: \n        if \"A\" in mot:\n            mot = str (input(\"Enter sentence (without A) : \"))\n        else :\n            break\nprint(\"Success your sentences is correct !\")",
        "detail": "week-4.Day_1.Exercise XP Ninja.Exercise-5",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "week-4.Day_2.Challenge.Challenge-1",
        "description": "week-4.Day_2.Challenge.Challenge-1",
        "peekOfCode": "num = int(input(\"Entrer un number : \"))\nprint(\"\\n\")\nleng = int(input(\"Entrer un lenght : \"))\ndico = []\nfor x in range (1, leng+1):\n    dico.append(num*x) \nprint(dico)",
        "detail": "week-4.Day_2.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "leng",
        "kind": 5,
        "importPath": "week-4.Day_2.Challenge.Challenge-1",
        "description": "week-4.Day_2.Challenge.Challenge-1",
        "peekOfCode": "leng = int(input(\"Entrer un lenght : \"))\ndico = []\nfor x in range (1, leng+1):\n    dico.append(num*x) \nprint(dico)",
        "detail": "week-4.Day_2.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "dico",
        "kind": 5,
        "importPath": "week-4.Day_2.Challenge.Challenge-1",
        "description": "week-4.Day_2.Challenge.Challenge-1",
        "peekOfCode": "dico = []\nfor x in range (1, leng+1):\n    dico.append(num*x) \nprint(dico)",
        "detail": "week-4.Day_2.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "week-4.Day_2.Challenge.Challenge-2",
        "description": "week-4.Day_2.Challenge.Challenge-2",
        "peekOfCode": "string = input(\"Input a string : \")\nnew_string = \"\"\nfor i in range(len(string)):\n  if i == 0 or string[i] != string[i-1]:\n    new_string += string[i]\nprint(new_string)",
        "detail": "week-4.Day_2.Challenge.Challenge-2",
        "documentation": {}
    },
    {
        "label": "new_string",
        "kind": 5,
        "importPath": "week-4.Day_2.Challenge.Challenge-2",
        "description": "week-4.Day_2.Challenge.Challenge-2",
        "peekOfCode": "new_string = \"\"\nfor i in range(len(string)):\n  if i == 0 or string[i] != string[i-1]:\n    new_string += string[i]\nprint(new_string)",
        "detail": "week-4.Day_2.Challenge.Challenge-2",
        "documentation": {}
    },
    {
        "label": "my_fav_numbers",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-1",
        "description": "week-4.Day_2.Exercise XP.Exercise-1",
        "peekOfCode": "my_fav_numbers = set()\nmy_fav_numbers = {1, 6, 4, 8, 3, 12, 22}\n# Add two numbers to the set\nmy_fav_numbers.add(3)\nmy_fav_numbers.add(11)\n# Delete the last number\nmy_fav_numbers.pop()\n# Create a new set\nfriend_fav_numbers = set()\nfriend_fav_numbers = {13, 18, 111, 90, 324}",
        "detail": "week-4.Day_2.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "my_fav_numbers",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-1",
        "description": "week-4.Day_2.Exercise XP.Exercise-1",
        "peekOfCode": "my_fav_numbers = {1, 6, 4, 8, 3, 12, 22}\n# Add two numbers to the set\nmy_fav_numbers.add(3)\nmy_fav_numbers.add(11)\n# Delete the last number\nmy_fav_numbers.pop()\n# Create a new set\nfriend_fav_numbers = set()\nfriend_fav_numbers = {13, 18, 111, 90, 324}\nour_fav_numbers = my_fav_numbers.union(friend_fav_numbers)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "friend_fav_numbers",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-1",
        "description": "week-4.Day_2.Exercise XP.Exercise-1",
        "peekOfCode": "friend_fav_numbers = set()\nfriend_fav_numbers = {13, 18, 111, 90, 324}\nour_fav_numbers = my_fav_numbers.union(friend_fav_numbers)\nprint(our_fav_numbers)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "friend_fav_numbers",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-1",
        "description": "week-4.Day_2.Exercise XP.Exercise-1",
        "peekOfCode": "friend_fav_numbers = {13, 18, 111, 90, 324}\nour_fav_numbers = my_fav_numbers.union(friend_fav_numbers)\nprint(our_fav_numbers)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "our_fav_numbers",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-1",
        "description": "week-4.Day_2.Exercise XP.Exercise-1",
        "peekOfCode": "our_fav_numbers = my_fav_numbers.union(friend_fav_numbers)\nprint(our_fav_numbers)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "sandwich_orders",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-10",
        "description": "week-4.Day_2.Exercise XP.Exercise-10",
        "peekOfCode": "sandwich_orders = [\"Tuna sandwich\", \"Avocado sandwich\", \"Egg sandwich\", \"Sabih sandwich\", \"Pastrami sandwich\"]\n# creation of empty list\nfinished_sandwiches = list()\n# create \"p\" which will allow us to determine the exact number of sandwiches prepared\np = 0\n# remove ready-made sandwiches\nwhile sandwich_orders !=[]:\n    test =input(\"What sandwich did you finish making?\")\n    if test in sandwich_orders:\n        sandwich_orders.remove(test)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-10",
        "documentation": {}
    },
    {
        "label": "finished_sandwiches",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-10",
        "description": "week-4.Day_2.Exercise XP.Exercise-10",
        "peekOfCode": "finished_sandwiches = list()\n# create \"p\" which will allow us to determine the exact number of sandwiches prepared\np = 0\n# remove ready-made sandwiches\nwhile sandwich_orders !=[]:\n    test =input(\"What sandwich did you finish making?\")\n    if test in sandwich_orders:\n        sandwich_orders.remove(test)\n        finished_sandwiches.append(test)\n        p = p + 1",
        "detail": "week-4.Day_2.Exercise XP.Exercise-10",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-10",
        "description": "week-4.Day_2.Exercise XP.Exercise-10",
        "peekOfCode": "p = 0\n# remove ready-made sandwiches\nwhile sandwich_orders !=[]:\n    test =input(\"What sandwich did you finish making?\")\n    if test in sandwich_orders:\n        sandwich_orders.remove(test)\n        finished_sandwiches.append(test)\n        p = p + 1\n# Print the ready-made sandwiches\nfor i in range(0, p):",
        "detail": "week-4.Day_2.Exercise XP.Exercise-10",
        "documentation": {}
    },
    {
        "label": "sandwich_orders",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-11",
        "description": "week-4.Day_2.Exercise XP.Exercise-11",
        "peekOfCode": "sandwich_orders = [\"Pastrami sandwich\", \"Tuna sandwich\", \"Avocado sandwich\", \"Pastrami sandwich\", \"Egg sandwich\", \"Sabih sandwich\", \"Pastrami sandwich\"]\nfinished_sandwiches = list()\np = 0\nprint(\"ALERT!!! Charcuterie no longer has pastrami\")\n# pastramis delete\nwhile \"Pastrami sandwich\" in sandwich_orders:\n    sandwich_orders.remove(\"Pastrami sandwich\")\nwhile sandwich_orders != [] :\n    test = input(\"What sandwich did you finish making? \")\n    if test in sandwich_orders:",
        "detail": "week-4.Day_2.Exercise XP.Exercise-11",
        "documentation": {}
    },
    {
        "label": "finished_sandwiches",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-11",
        "description": "week-4.Day_2.Exercise XP.Exercise-11",
        "peekOfCode": "finished_sandwiches = list()\np = 0\nprint(\"ALERT!!! Charcuterie no longer has pastrami\")\n# pastramis delete\nwhile \"Pastrami sandwich\" in sandwich_orders:\n    sandwich_orders.remove(\"Pastrami sandwich\")\nwhile sandwich_orders != [] :\n    test = input(\"What sandwich did you finish making? \")\n    if test in sandwich_orders:\n        sandwich_orders.remove(test)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-11",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-11",
        "description": "week-4.Day_2.Exercise XP.Exercise-11",
        "peekOfCode": "p = 0\nprint(\"ALERT!!! Charcuterie no longer has pastrami\")\n# pastramis delete\nwhile \"Pastrami sandwich\" in sandwich_orders:\n    sandwich_orders.remove(\"Pastrami sandwich\")\nwhile sandwich_orders != [] :\n    test = input(\"What sandwich did you finish making? \")\n    if test in sandwich_orders:\n        sandwich_orders.remove(test)\n        finished_sandwiches.append(test)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-11",
        "documentation": {}
    },
    {
        "label": "basket",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-3",
        "description": "week-4.Day_2.Exercise XP.Exercise-3",
        "peekOfCode": "basket = [\"Banana\", \"Apples\", \"Oranges\", \"Blueberries\"]\nbasket.remove(\"Banana\")\nbasket.remove(\"Blueberries\")\nbasket.append(\"Kiwi\")\nbasket.append(\"Apples\")\napples = 0\nfor i in basket:\n    if i == \"Apples\":\n        apples = apples + 1\nprint(\"There is {} Apples in the basket\".format(apples))",
        "detail": "week-4.Day_2.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "apples",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-3",
        "description": "week-4.Day_2.Exercise XP.Exercise-3",
        "peekOfCode": "apples = 0\nfor i in basket:\n    if i == \"Apples\":\n        apples = apples + 1\nprint(\"There is {} Apples in the basket\".format(apples))\nbasket.clear()\nprint(basket)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-4",
        "description": "week-4.Day_2.Exercise XP.Exercise-4",
        "peekOfCode": "L = list()\nU = 4\nfor i in range(1, 11):\n    L.append(U+0.1)\n    U += 4\nprint(L)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-4",
        "description": "week-4.Day_2.Exercise XP.Exercise-4",
        "peekOfCode": "U = 4\nfor i in range(1, 11):\n    L.append(U+0.1)\n    U += 4\nprint(L)",
        "detail": "week-4.Day_2.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-6",
        "description": "week-4.Day_2.Exercise XP.Exercise-6",
        "peekOfCode": "name = \"\"\nwhile name != 'Ryota':\n    name = input('Enter your name :')",
        "detail": "week-4.Day_2.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-7",
        "description": "week-4.Day_2.Exercise XP.Exercise-7",
        "peekOfCode": "fruits = input('Enter your favorite(s) fruits (NB: Separate fruit with a single space): ')\nfruits_list  = list()\nfruits_list = fruits.split()\nmy_fruits = input('Enter a fruit name : ')\ntest = 0\nfor i in fruits_list:\n    if my_fruits == i:\n        test = 1\nif test == 1 :\n    print(\"You have choose one of your favorite fruits, great !!\")",
        "detail": "week-4.Day_2.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "fruits_list",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-7",
        "description": "week-4.Day_2.Exercise XP.Exercise-7",
        "peekOfCode": "fruits_list = fruits.split()\nmy_fruits = input('Enter a fruit name : ')\ntest = 0\nfor i in fruits_list:\n    if my_fruits == i:\n        test = 1\nif test == 1 :\n    print(\"You have choose one of your favorite fruits, great !!\")\nelse :\n    print(\"This fruit is not one of your favorite fruits\")",
        "detail": "week-4.Day_2.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "my_fruits",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-7",
        "description": "week-4.Day_2.Exercise XP.Exercise-7",
        "peekOfCode": "my_fruits = input('Enter a fruit name : ')\ntest = 0\nfor i in fruits_list:\n    if my_fruits == i:\n        test = 1\nif test == 1 :\n    print(\"You have choose one of your favorite fruits, great !!\")\nelse :\n    print(\"This fruit is not one of your favorite fruits\")",
        "detail": "week-4.Day_2.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-7",
        "description": "week-4.Day_2.Exercise XP.Exercise-7",
        "peekOfCode": "test = 0\nfor i in fruits_list:\n    if my_fruits == i:\n        test = 1\nif test == 1 :\n    print(\"You have choose one of your favorite fruits, great !!\")\nelse :\n    print(\"This fruit is not one of your favorite fruits\")",
        "detail": "week-4.Day_2.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-8",
        "description": "week-4.Day_2.Exercise XP.Exercise-8",
        "peekOfCode": "L = list()\np = 0\nwhile True:\n    pizzas = input('Enter a pizza(s) topping (or tape quit to cancel): ')\n    if pizzas != 'quit':\n        L.append(pizzas)\n        print(\"You add {} to the pizza\\'s topping list \".format(pizzas))\n        p = p + 2.5\n    else:\n        pizzas = \"\"",
        "detail": "week-4.Day_2.Exercise XP.Exercise-8",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "week-4.Day_2.Exercise XP.Exercise-8",
        "description": "week-4.Day_2.Exercise XP.Exercise-8",
        "peekOfCode": "p = 0\nwhile True:\n    pizzas = input('Enter a pizza(s) topping (or tape quit to cancel): ')\n    if pizzas != 'quit':\n        L.append(pizzas)\n        print(\"You add {} to the pizza\\'s topping list \".format(pizzas))\n        p = p + 2.5\n    else:\n        pizzas = \"\"\n        break    ",
        "detail": "week-4.Day_2.Exercise XP.Exercise-8",
        "documentation": {}
    },
    {
        "label": "first_l",
        "kind": 5,
        "importPath": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "description": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "peekOfCode": "first_l = [1, 2, 3, 4, 5, 6]\n# Create the second list\nsecond_l = [11, 22, 33, 44, 55, 66]\n# Use extend for concatened two lists\nfirst_l.extend(second_l)\n# using * operator to concat\n# final_list = [*first_l, *second_l]\nprint(\"\", first_l)",
        "detail": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "documentation": {}
    },
    {
        "label": "second_l",
        "kind": 5,
        "importPath": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "description": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "peekOfCode": "second_l = [11, 22, 33, 44, 55, 66]\n# Use extend for concatened two lists\nfirst_l.extend(second_l)\n# using * operator to concat\n# final_list = [*first_l, *second_l]\nprint(\"\", first_l)",
        "detail": "week-4.Day_2.Exerices XP Gold.Exercise-1",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "description": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "peekOfCode": "names = ['Samus', 'Cortana', 'V', 'Link', 'Mario', 'Cortana', 'Samus']\npt = 0\nname = input('Enter your name : ')\nfor i in names:\n    if (i == name):\n        pt = 0       \nif pt != 0:\n    print(\"Your name {} is in position {} \".format(name, pt))\nelse :\n    print(\"Your name is not on the list\")",
        "detail": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "description": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "peekOfCode": "pt = 0\nname = input('Enter your name : ')\nfor i in names:\n    if (i == name):\n        pt = 0       \nif pt != 0:\n    print(\"Your name {} is in position {} \".format(name, pt))\nelse :\n    print(\"Your name is not on the list\")",
        "detail": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "description": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "peekOfCode": "name = input('Enter your name : ')\nfor i in names:\n    if (i == name):\n        pt = 0       \nif pt != 0:\n    print(\"Your name {} is in position {} \".format(name, pt))\nelse :\n    print(\"Your name is not on the list\")",
        "detail": "week-4.Day_2.Exerices XP Gold.Exercise-3",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "week-4.Day_3.Challenge.Challenge-1",
        "description": "week-4.Day_3.Challenge.Challenge-1",
        "peekOfCode": "word = input(\"Input a word : \")\nletters = {}\nfor i, letter in enumerate(word):\n  if letter not in letters:\n    letters[letter] = []\n  letters[letter].append(i)\nprint(letters)",
        "detail": "week-4.Day_3.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "week-4.Day_3.Challenge.Challenge-1",
        "description": "week-4.Day_3.Challenge.Challenge-1",
        "peekOfCode": "letters = {}\nfor i, letter in enumerate(word):\n  if letter not in letters:\n    letters[letter] = []\n  letters[letter].append(i)\nprint(letters)",
        "detail": "week-4.Day_3.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "articles",
        "kind": 5,
        "importPath": "week-4.Day_3.Challenge.Challenge-2",
        "description": "week-4.Day_3.Challenge.Challenge-2",
        "peekOfCode": "articles = {\n    \"Apple\": 2.50,\n    \"Mangoe\": 0.50,\n    \"Banana\": 1.50,\n    \"Water\": 3.00,\n    \"Yogourt\": 0.75,\n    \"Orange\": 0.75,\n    \"Pineapple\": 0.50,\n    \"Papaya\": 4.50,\n    \"Tee-Shirt\": 12.8",
        "detail": "week-4.Day_3.Challenge.Challenge-2",
        "documentation": {}
    },
    {
        "label": "wallet",
        "kind": 5,
        "importPath": "week-4.Day_3.Challenge.Challenge-2",
        "description": "week-4.Day_3.Challenge.Challenge-2",
        "peekOfCode": "wallet = float(input(\"Input your wallet amount : \"))\n# Create a empty list\nshopping = []\nfor article, price in articles.items():\n  if wallet >= price:\n    shopping.append(article)\n    wallet -= price\n# Short the list of items\nshopping.sort()\n# Print the shopping's list",
        "detail": "week-4.Day_3.Challenge.Challenge-2",
        "documentation": {}
    },
    {
        "label": "shopping",
        "kind": 5,
        "importPath": "week-4.Day_3.Challenge.Challenge-2",
        "description": "week-4.Day_3.Challenge.Challenge-2",
        "peekOfCode": "shopping = []\nfor article, price in articles.items():\n  if wallet >= price:\n    shopping.append(article)\n    wallet -= price\n# Short the list of items\nshopping.sort()\n# Print the shopping's list\nif shopping:\n  print(\"You can buy :\")",
        "detail": "week-4.Day_3.Challenge.Challenge-2",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-1",
        "description": "week-4.Day_3.Exercise XP.Exercise-1",
        "peekOfCode": "keys = ['Ten', 'Twenty', 'Thirty']\nvalues = [10, 20, 30]\n# with a dictionary comprehension\n    #dictionary = { key: value for key, value in zip(keys, values)}\n# with dict constructor\ndictionary = dict(zip(keys, values))\nprint(dictionary)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-1",
        "description": "week-4.Day_3.Exercise XP.Exercise-1",
        "peekOfCode": "values = [10, 20, 30]\n# with a dictionary comprehension\n    #dictionary = { key: value for key, value in zip(keys, values)}\n# with dict constructor\ndictionary = dict(zip(keys, values))\nprint(dictionary)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-1",
        "description": "week-4.Day_3.Exercise XP.Exercise-1",
        "peekOfCode": "dictionary = dict(zip(keys, values))\nprint(dictionary)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "family",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-2",
        "description": "week-4.Day_3.Exercise XP.Exercise-2",
        "peekOfCode": "family = {}\nwhile True:\n    name = input(\"Input a name (or tape 'done' to quit) : \")\n    if name == 'done':\n        break\n    age = int(input(\"Input the person\\'s name : \"))\n    family[name] = age\ntotal_cost = 0\nfor name, age in family.items():\n    if age < 3:",
        "detail": "week-4.Day_3.Exercise XP.Exercise-2",
        "documentation": {}
    },
    {
        "label": "total_cost",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-2",
        "description": "week-4.Day_3.Exercise XP.Exercise-2",
        "peekOfCode": "total_cost = 0\nfor name, age in family.items():\n    if age < 3:\n        cost = 0\n    elif age >= 3 and age <= 12:\n        cost = 10\n    else:\n        cost = 15\n    print(f\"{name} must paid {cost}$ for the ticket.\")\n    total_cost += cost",
        "detail": "week-4.Day_3.Exercise XP.Exercise-2",
        "documentation": {}
    },
    {
        "label": "brand",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-3",
        "description": "week-4.Day_3.Exercise XP.Exercise-3",
        "peekOfCode": "brand = {\n    'name': 'Zara',\n    'creation_date': 1975,\n    'creator_name': 'Amancio Ortega Gaona',\n    'type_of_clothes': ['men', 'women', 'children', 'home'],\n    'international_competitors': ['Gap', 'H&M', 'Benetton'],\n    'number_stores': 7000,\n    'major_color': {\n        'France': ['blue'],\n        'Spain': ['red'],",
        "detail": "week-4.Day_3.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "brand['number_stores']",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-3",
        "description": "week-4.Day_3.Exercise XP.Exercise-3",
        "peekOfCode": "brand['number_stores'] = 2\n# 4. explanation of zara clients\nprint(f\"Zara's customers are men, women, children and those looking for home furnishings.\")\n# 5. Adding a key\nbrand['country_creation'] = 'Spain'\n# 6. Checking for the presence of the international_competitors key and adding Desigual\nif 'international_competitors' in brand:\n    brand['international_competitors'].append('Desigual')\n# 7. Delete informations about the date of creation\ndel brand['creation_date']",
        "detail": "week-4.Day_3.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "brand['country_creation']",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-3",
        "description": "week-4.Day_3.Exercise XP.Exercise-3",
        "peekOfCode": "brand['country_creation'] = 'Spain'\n# 6. Checking for the presence of the international_competitors key and adding Desigual\nif 'international_competitors' in brand:\n    brand['international_competitors'].append('Desigual')\n# 7. Delete informations about the date of creation\ndel brand['creation_date']\n# 8. Printing of the latest international competitor\nprint(f\"The last international competitor's is {brand['international_competitors'][-1]}.\")\n# 9. Printing of the main colors of clothing in the United States\nprint(f\"The major colors in the US are {', '.join(brand['major_color']['US'])}.\")",
        "detail": "week-4.Day_3.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "more_on_zara",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-3",
        "description": "week-4.Day_3.Exercise XP.Exercise-3",
        "peekOfCode": "more_on_zara = {\n    'creation_date': 1975,\n    'number_stores': 10000\n}\n# 13. Add information into brand's dictionary\nbrand.update(more_on_zara)\n# 14. Printing de la valeur de la clé number_stores\nprint(f\"The number of Zara stores is now {brand['number_stores']}.\")",
        "detail": "week-4.Day_3.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "users",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "users = [\"Mickey\",\"Minnie\",\"Donald\",\"Ariel\",\"Pluto\"]\ndisney_users_A = {}\nfor i, user in enumerate(users):\n    disney_users_A[user] = i\nprint(disney_users_A)\n# 2nd result's creation\ndisney_users_B = {}\nfor i, user in enumerate(users):\n    disney_users_B[i] = user\nprint(disney_users_B)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "disney_users_A",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "disney_users_A = {}\nfor i, user in enumerate(users):\n    disney_users_A[user] = i\nprint(disney_users_A)\n# 2nd result's creation\ndisney_users_B = {}\nfor i, user in enumerate(users):\n    disney_users_B[i] = user\nprint(disney_users_B)\n# 3rd result's creation",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "disney_users_B",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "disney_users_B = {}\nfor i, user in enumerate(users):\n    disney_users_B[i] = user\nprint(disney_users_B)\n# 3rd result's creation\ndisney_users_C = {}\nfor user in sorted(users):\n    disney_users_C[user] = users.index(user)\nprint(disney_users_C)\n# 1st result's creation with names contains \"i\"",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "disney_users_C",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "disney_users_C = {}\nfor user in sorted(users):\n    disney_users_C[user] = users.index(user)\nprint(disney_users_C)\n# 1st result's creation with names contains \"i\"\ndisney_users_D = {}\nfor user in users:\n    if 'i' in user:\n        disney_users_D[user] = users.index(user)\nprint(disney_users_D)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "disney_users_D",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "disney_users_D = {}\nfor user in users:\n    if 'i' in user:\n        disney_users_D[user] = users.index(user)\nprint(disney_users_D)\n# 1st result's creation with names start by \"m\" or \"p\"\ndisney_users_E = {}\nfor user in users:\n    if user.startswith(('m', 'p')):\n        disney_users_E[user] = users.index(user)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "disney_users_E",
        "kind": 5,
        "importPath": "week-4.Day_3.Exercise XP.Exercise-4",
        "description": "week-4.Day_3.Exercise XP.Exercise-4",
        "peekOfCode": "disney_users_E = {}\nfor user in users:\n    if user.startswith(('m', 'p')):\n        disney_users_E[user] = users.index(user)\nprint(disney_users_E)",
        "detail": "week-4.Day_3.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "week-4.Day_4.Challenge.challenge-1",
        "description": "week-4.Day_4.Challenge.challenge-1",
        "peekOfCode": "matrix = [\n    \"7i3\",\n    \"Tsi\",\n    \"h%x\",\n    \"i #\",\n    \"sM \",\n    \"$a \",\n    \"#t%\",\n    \"^r!\"\n]",
        "detail": "week-4.Day_4.Challenge.challenge-1",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "week-4.Day_4.Challenge.challenge-1",
        "description": "week-4.Day_4.Challenge.challenge-1",
        "peekOfCode": "output = \"\"\n#  For each column of the matrix\nfor col in range(len(matrix[0])):\n    # For each row in the matrix\n    for row in range(len(matrix)):\n        # Retrieves the character of the current column and row\n        char = matrix[row][col]\n        # If the character is alpha, append it to the output string\n        if char.isalpha():\n            output += char",
        "detail": "week-4.Day_4.Challenge.challenge-1",
        "documentation": {}
    },
    {
        "label": "display_message",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-1",
        "description": "week-4.Day_4.Exercise XP.Exercise-1",
        "peekOfCode": "def display_message():\n  message = \"I\\'m learning python in this course\"\n  print(message)\ndisplay_message()",
        "detail": "week-4.Day_4.Exercise XP.Exercise-1",
        "documentation": {}
    },
    {
        "label": "favorite_book",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-2",
        "description": "week-4.Day_4.Exercise XP.Exercise-2",
        "peekOfCode": "def favorite_book(title):\n  print(\"My favorite book is \"+ title)\nfavorite_book(\"Dans la gueule du loup\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-2",
        "documentation": {}
    },
    {
        "label": "describe_city",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-3",
        "description": "week-4.Day_4.Exercise XP.Exercise-3",
        "peekOfCode": "def describe_city(city, country):\n  print(city + \" is in \" + country + \".\")\ndescribe_city('KOUDOUGOU','BURKINA')",
        "detail": "week-4.Day_4.Exercise XP.Exercise-3",
        "documentation": {}
    },
    {
        "label": "compare_numbers",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-4",
        "description": "week-4.Day_4.Exercise XP.Exercise-4",
        "peekOfCode": "def compare_numbers(num):\n  random_num = random.randint(1, 100)\n  if num == random_num:\n    print(\"Success ! Two numbers are same : \" + str(num) + \".\")\n  else:\n    print(\"Failed. Two numbers aren\\'t same : \" + str(num) + \" et \" + str(random_num) + \".\")\ncompare_numbers(70)",
        "detail": "week-4.Day_4.Exercise XP.Exercise-4",
        "documentation": {}
    },
    {
        "label": "make_shirt",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-5",
        "description": "week-4.Day_4.Exercise XP.Exercise-5",
        "peekOfCode": "def make_shirt(size, text):\n  print(\"The size of the shirt is \" + size + \" and the text is '\" + text + \"'.\")\n# call of make_shirt's function with parameters\nmake_shirt(\"medium\", \"I love Python\")\ndef make_shirt(size=\"large\", text=\"I love Python\"):\n  print(\"The size of the shirt is \" + size + \" and the text is '\" + text + \"'.\")\n# Make a shirt with the default's message\nmake_shirt()\n# Make a moyen shirt with the default's message\nmake_shirt(size=\"medium\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "make_shirt",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-5",
        "description": "week-4.Day_4.Exercise XP.Exercise-5",
        "peekOfCode": "def make_shirt(size=\"large\", text=\"I love Python\"):\n  print(\"The size of the shirt is \" + size + \" and the text is '\" + text + \"'.\")\n# Make a shirt with the default's message\nmake_shirt()\n# Make a moyen shirt with the default's message\nmake_shirt(size=\"medium\")\n# Make a shirt of any size with a different message\nmake_shirt(size=\"small\", text=\"I love coding\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-5",
        "documentation": {}
    },
    {
        "label": "show_magicians",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-6",
        "description": "week-4.Day_4.Exercise XP.Exercise-6",
        "peekOfCode": "def show_magicians(names):\n  for name in names:\n    print(name)\nmagician_names = ['Harry Houdini', 'David Blaine', 'Criss Angel']\n# Calling the show_magicians() function with the list of magicians' names\nshow_magicians(magician_names)\ndef make_great(names):\n  for i in range(len(names)):\n    names[i] = names[i] + \" the Great\"\n# Calling the make_great() function with the list of magicians' names",
        "detail": "week-4.Day_4.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "make_great",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-6",
        "description": "week-4.Day_4.Exercise XP.Exercise-6",
        "peekOfCode": "def make_great(names):\n  for i in range(len(names)):\n    names[i] = names[i] + \" the Great\"\n# Calling the make_great() function with the list of magicians' names\nmake_great(magician_names)\n# Calling the show_magicians() function to display the modified list\nshow_magicians(magician_names)\ndef make_great(names):\n  great_names = [name + \" the Great\" for name in names]\n  return great_names",
        "detail": "week-4.Day_4.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "make_great",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-6",
        "description": "week-4.Day_4.Exercise XP.Exercise-6",
        "peekOfCode": "def make_great(names):\n  great_names = [name + \" the Great\" for name in names]\n  return great_names\n# Calling the make_great() function to get a new modified list\ngreat_magician_names = make_great(magician_names)\n# Calling the show_magicians() function to display the new modified list\nshow_magicians(great_magician_names)",
        "detail": "week-4.Day_4.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "magician_names",
        "kind": 5,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-6",
        "description": "week-4.Day_4.Exercise XP.Exercise-6",
        "peekOfCode": "magician_names = ['Harry Houdini', 'David Blaine', 'Criss Angel']\n# Calling the show_magicians() function with the list of magicians' names\nshow_magicians(magician_names)\ndef make_great(names):\n  for i in range(len(names)):\n    names[i] = names[i] + \" the Great\"\n# Calling the make_great() function with the list of magicians' names\nmake_great(magician_names)\n# Calling the show_magicians() function to display the modified list\nshow_magicians(magician_names)",
        "detail": "week-4.Day_4.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "great_magician_names",
        "kind": 5,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-6",
        "description": "week-4.Day_4.Exercise XP.Exercise-6",
        "peekOfCode": "great_magician_names = make_great(magician_names)\n# Calling the show_magicians() function to display the new modified list\nshow_magicians(great_magician_names)",
        "detail": "week-4.Day_4.Exercise XP.Exercise-6",
        "documentation": {}
    },
    {
        "label": "get_random_temp",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def get_random_temp():\n    return random.uniform(-10, 40)\nfor i in range(10):\n    print(get_random_temp())\nimport random\ndef get_random_temp():\n    return random.randint(-10, 40)\n#############################################################\ndef main():\n    # Obtaining a random temperature",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "get_random_temp",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def get_random_temp():\n    return random.randint(-10, 40)\n#############################################################\ndef main():\n    # Obtaining a random temperature\n    temp = (get_random_temp())\n    print(f\"The current temperature is {temp} degrees Celsius.\")\nmain()\n###############################################################################\nimport random",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def main():\n    # Obtaining a random temperature\n    temp = (get_random_temp())\n    print(f\"The current temperature is {temp} degrees Celsius.\")\nmain()\n###############################################################################\nimport random\ndef get_random_temp():\n    return random.randint(-10, 40)\ndef main():",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "get_random_temp",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def get_random_temp():\n    return random.randint(-10, 40)\ndef main():\n    temp = get_random_temp()\n    if temp < 0:\n        print(f\"it's freezing cold! Wear extra layers today. The current temperature is {temp} degrees Celsius.\")\n    elif temp >= 0 and temp <= 16:\n        print(f\"Pretty cold! Don't forget your coat. The current temperature is {temp} degrees Celsius.\")\n    elif temp > 16 and temp <= 23:\n        print(f\"It's cool. Remember to put on a sweater. The current temperature is {temp} degrees Celsius.\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def main():\n    temp = get_random_temp()\n    if temp < 0:\n        print(f\"it's freezing cold! Wear extra layers today. The current temperature is {temp} degrees Celsius.\")\n    elif temp >= 0 and temp <= 16:\n        print(f\"Pretty cold! Don't forget your coat. The current temperature is {temp} degrees Celsius.\")\n    elif temp > 16 and temp <= 23:\n        print(f\"It's cool. Remember to put on a sweater. The current temperature is {temp} degrees Celsius.\")\n    elif temp > 23 and temp <= 32:\n        print(f\"The weather is nice. Don't forget to take a jacket if you go out. The current temperature is {temp} degrees Celsius.\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "get_random_temp",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def get_random_temp(saison):\n  if saison == \"été\":\n    lower_bound = 16\n    upper_bound = 40\n  elif saison == \"automne\" or saison == \"printemps\":\n    lower_bound = -10\n    upper_bound = 16\n  elif saison == \"hiver\":\n    lower_bound = -10\n    upper_bound = 16",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def main():\n  saison = input(\"Enter a season (été, automne, hiver, printemps) : \")\n  temp = get_random_temp(saison)\n  print(\"The temperature is\", temp, \"degrees.\")\nmain()\n################bonus 1 ##############\ndef main():\n  saison = input(\"Saisissez une saison (été, automne, hiver, printemps) : \")\n  temp = get_random_temp(saison)\n  print(\"La température est de\", temp, \"degrés.\")",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def main():\n  saison = input(\"Saisissez une saison (été, automne, hiver, printemps) : \")\n  temp = get_random_temp(saison)\n  print(\"La température est de\", temp, \"degrés.\")\nmain()\n#################################\ndef main():\n  mois = int(input(\"Saisissez le numéro du mois (1-12) : \"))\n  if mois == 12 or mois == 1 or mois == 2:\n    saison = \"hiver\"",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-4.Day_4.Exercise XP.Exercise-7",
        "description": "week-4.Day_4.Exercise XP.Exercise-7",
        "peekOfCode": "def main():\n  mois = int(input(\"Saisissez le numéro du mois (1-12) : \"))\n  if mois == 12 or mois == 1 or mois == 2:\n    saison = \"hiver\"\n  elif mois >= 3 and mois <= 5:\n    saison = \"printemps\"\n  elif mois >= 6 and mois <= 8:\n    saison = \"été\"\n  elif mois >= 9 and mois <= 11:\n    saison = \"automne\"",
        "detail": "week-4.Day_4.Exercise XP.Exercise-7",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "week-4.Day_5.Challenge.Challenge-1",
        "description": "week-4.Day_5.Challenge.Challenge-1",
        "peekOfCode": "words = input(\"Saisissez une séquence de mots séparés par des virgules : \")\n# Separates the word string into a word list\nwords_list = [word.strip() for word in words.split(',')]\n#  Sorts the word list alphabetically\nwords_list.sort()\n# Displays the comma-separated list of words\nprint(', '.join(words_list))",
        "detail": "week-4.Day_5.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "words_list",
        "kind": 5,
        "importPath": "week-4.Day_5.Challenge.Challenge-1",
        "description": "week-4.Day_5.Challenge.Challenge-1",
        "peekOfCode": "words_list = [word.strip() for word in words.split(',')]\n#  Sorts the word list alphabetically\nwords_list.sort()\n# Displays the comma-separated list of words\nprint(', '.join(words_list))",
        "detail": "week-4.Day_5.Challenge.Challenge-1",
        "documentation": {}
    },
    {
        "label": "print_grid",
        "kind": 2,
        "importPath": "week-4.Day_5.Mini_projet.projet_1",
        "description": "week-4.Day_5.Mini_projet.projet_1",
        "peekOfCode": "def print_grid():\n    for row in grid:\n        print(' '.join(row))\n# Function to check if a player has won\ndef check_win(player):\n    # Checks rows\n    for row in grid:\n        if row == [player, player, player]:\n            return True\n    # Checks columns",
        "detail": "week-4.Day_5.Mini_projet.projet_1",
        "documentation": {}
    },
    {
        "label": "check_win",
        "kind": 2,
        "importPath": "week-4.Day_5.Mini_projet.projet_1",
        "description": "week-4.Day_5.Mini_projet.projet_1",
        "peekOfCode": "def check_win(player):\n    # Checks rows\n    for row in grid:\n        if row == [player, player, player]:\n            return True\n    # Checks columns\n    for col in range(3):\n        if grid[0][col] == player and grid[1][col] == player and grid[2][col] == player:\n            return True\n    # Checks diagonals",
        "detail": "week-4.Day_5.Mini_projet.projet_1",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "week-4.Day_5.Mini_projet.projet_1",
        "description": "week-4.Day_5.Mini_projet.projet_1",
        "peekOfCode": "grid = [\n    [' ', ' ', ' '],\n    [' ', ' ', ' '],\n    [' ', ' ', ' ']\n]\n# list of players\nplayers = ['O', 'X']\n# Clue of the current player in the list of players\ncurrent_player_index = 0\n# Function to display the grid",
        "detail": "week-4.Day_5.Mini_projet.projet_1",
        "documentation": {}
    },
    {
        "label": "players",
        "kind": 5,
        "importPath": "week-4.Day_5.Mini_projet.projet_1",
        "description": "week-4.Day_5.Mini_projet.projet_1",
        "peekOfCode": "players = ['O', 'X']\n# Clue of the current player in the list of players\ncurrent_player_index = 0\n# Function to display the grid\ndef print_grid():\n    for row in grid:\n        print(' '.join(row))\n# Function to check if a player has won\ndef check_win(player):\n    # Checks rows",
        "detail": "week-4.Day_5.Mini_projet.projet_1",
        "documentation": {}
    },
    {
        "label": "current_player_index",
        "kind": 5,
        "importPath": "week-4.Day_5.Mini_projet.projet_1",
        "description": "week-4.Day_5.Mini_projet.projet_1",
        "peekOfCode": "current_player_index = 0\n# Function to display the grid\ndef print_grid():\n    for row in grid:\n        print(' '.join(row))\n# Function to check if a player has won\ndef check_win(player):\n    # Checks rows\n    for row in grid:\n        if row == [player, player, player]:",
        "detail": "week-4.Day_5.Mini_projet.projet_1",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.asgi",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-#n%+y^*(m)q2k-_j5upt2!mw%!#ffw^k=+(@z*gc-te19ez&l5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-#n%+y^*(m)q2k-_j5upt2!mw%!#ffw^k=+(@z*gc-te19ez&l5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'info'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'info'\n]\nMIDDLEWARE = [",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'animals.urls'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "ROOT_URLCONF = 'animals.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "WSGI_APPLICATION = 'animals.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.urls",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"info.urls\")),\n]",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.animals.wsgi",
        "description": "week-8.Day-1.Exercise XP.animal-info.animals.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "week-8.Day-1.Exercise XP.animal-info.animals.wsgi",
        "documentation": {}
    },
    {
        "label": "InfoConfig",
        "kind": 6,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.apps",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.apps",
        "peekOfCode": "class InfoConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'info'",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.urls",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('family/<int:x>', views.family, name=\"family\" ),\n    path('animal/<int:y>', views.animals, name=\"animal\")\n]",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "peekOfCode": "def home(request):\n    context ={\n        \"data\": data,\n        }\n    return render(request, \"info/home.html\", context)\ndef family(request, x):\n    list_family_animal = []\n    for value in data[\"animals\"]:\n        if value[\"family\"] == x:\n            list_family_animal.append(value)",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "documentation": {}
    },
    {
        "label": "family",
        "kind": 2,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "peekOfCode": "def family(request, x):\n    list_family_animal = []\n    for value in data[\"animals\"]:\n        if value[\"family\"] == x:\n            list_family_animal.append(value)\n    for val in data[\"families\"]:\n        if val[\"id\"] == x:\n            for va in list_family_animal:\n                va[\"family\"] = val[\"name\"] +\" id: \"+ str(x)\n    context = {",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "documentation": {}
    },
    {
        "label": "animals",
        "kind": 2,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "peekOfCode": "def animals(request, y):\n    list_animal = []\n    for value in data[\"animals\"]:\n        if value[\"id\"]==y:\n            list_animal.append(value)\n    for val in data[\"families\"]:\n        if val[\"id\"] == y:\n            for va in list_animal:\n                va[\"family\"] = val[\"name\"] +\" id: \"+ str(y)\n    context = {\"list\":list_animal}",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "description": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "peekOfCode": "data = {\n    \"animals\": [\n        {\n            \"id\" :1,\n            \"name\": \"Dog\",\n            \"legs\": 4,\n            \"weight\": 5.67,\n            \"height\":4.2,\n            \"speed\": 34,\n            \"family\": 2",
        "detail": "week-8.Day-1.Exercise XP.animal-info.info.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "week-8.Day-1.Exercise XP.animal-info.manage",
        "description": "week-8.Day-1.Exercise XP.animal-info.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'animals.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "week-8.Day-1.Exercise XP.animal-info.manage",
        "documentation": {}
    },
    {
        "label": "HOSTNAME",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "HOSTNAME = 'localhost'\nUSERNAME = 'postgres'\nPASSWORD = 'postgre'\nDATABASE = 'ibam'\n\"\"\" #Connection au serveur\ntry:\n    connection = psycopg2.connect(host=HOSTNAME, user=USERNAME, password=PASSWORD)\n    print(\"conection reussie!!\")\nexcept psycopg2.Error as e:\n    print(\"connection refusé veillez verifir les paramettre de connection!!\")",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "USERNAME = 'postgres'\nPASSWORD = 'postgre'\nDATABASE = 'ibam'\n\"\"\" #Connection au serveur\ntry:\n    connection = psycopg2.connect(host=HOSTNAME, user=USERNAME, password=PASSWORD)\n    print(\"conection reussie!!\")\nexcept psycopg2.Error as e:\n    print(\"connection refusé veillez verifir les paramettre de connection!!\")\n #Validation des transaction",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "PASSWORD = 'postgre'\nDATABASE = 'ibam'\n\"\"\" #Connection au serveur\ntry:\n    connection = psycopg2.connect(host=HOSTNAME, user=USERNAME, password=PASSWORD)\n    print(\"conection reussie!!\")\nexcept psycopg2.Error as e:\n    print(\"connection refusé veillez verifir les paramettre de connection!!\")\n #Validation des transaction\n connection.autocommit = True",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "DATABASE",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "DATABASE = 'ibam'\n\"\"\" #Connection au serveur\ntry:\n    connection = psycopg2.connect(host=HOSTNAME, user=USERNAME, password=PASSWORD)\n    print(\"conection reussie!!\")\nexcept psycopg2.Error as e:\n    print(\"connection refusé veillez verifir les paramettre de connection!!\")\n #Validation des transaction\n connection.autocommit = True\ncursor = connection.cursor() \"\"\"",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "cursor = connection.cursor() \"\"\"\n #Creation de la BD\ncursor.execute('DROP DATABASE IF EXISTS {};'.format('ibam'))\ncursor.execute(\"CREATE DATABASE ibam;\")\n#Coneection à la BD\ntry:\n    connection = psycopg2.connect(host=HOSTNAME, user=USERNAME, password=PASSWORD, dbname=DATABASE)\n    print(\"conection reussie!!\")\nexcept psycopg2.Error as e:\n    print(\"connection refusé veillez verifir les paramettre de connection!!\")",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "values = [\n      ('Peter', 'Grid', '77445511','Lowstreet 4'),\n    ('All', 'Grid', '77445511','Lowstreet 4'),\n    ('Vall', 'Grid', '77445511','Lowstreet 4'),\n    ('Til', 'Grid', '77445511','Lowstreet 4'),\n    ('TO', 'Grid', '77445511','Lowstreet 4'),\n    ('KA', 'Grid', '77445511','Lowstreet 4'),\n    ('DK', 'Grid', '77445511','Lowstreet 4'),\n    ('SQAZ', 'Grid', '77445511','Lowstreet 4'),\n    ('NAD', 'Grid', '77445511','Lowstreet 4'),",
        "detail": "dev_python",
        "documentation": {}
    },
    {
        "label": "sql1",
        "kind": 5,
        "importPath": "dev_python",
        "description": "dev_python",
        "peekOfCode": "sql1 = \"SELECT * FROM student;\"\ncursor.execute(sql1)\ncursor.fetchall()\nfor data in cursor.fetchall():\n    print(data)",
        "detail": "dev_python",
        "documentation": {}
    }
]